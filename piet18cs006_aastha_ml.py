# -*- coding: utf-8 -*-
"""PIET18CS006_Aastha_ML.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1Y0lo3R0R5wjd-J5BCFg9L46eNYupvYSb
"""

# # Data Preprocessing
# Importing the libraries
import numpy as np
import matplotlib.pyplot as plt
import pandas as pd

# Mounting Google Drive
from google.colab import drive
drive.mount('/content/drive')

# importing Dataset from Local drive
from google.colab import files
Uploaded=files.upload()

# Importing the dataset from Google Drive
dataset = pd.read_csv('/content/Classification Dataset11.csv')

print(dataset)

dataset.shape

dataset.describe()

X1=dataset.iloc[:,[3,1]].values

X1

X11=dataset[['skew','dfrange']]

X11

y1=dataset['meanfreq']

y1

# Extracting dependent and independent variables:
# Extracting independent variable:
X = dataset.iloc[:,2:4].values
# Extracting dependent variable:
y = dataset.iloc[:, 4].values

print(X)

print(y)

# Splitting the dataset into the Training set and Test set
from sklearn.model_selection import train_test_split

X_train, X_test, y_train, y_test = train_test_split(X, y, test_size = 0.25, random_state = 0)

print(X_train)

print(X_test)

print(y_train)

from sklearn.preprocessing import MinMaxScaler
sc = MinMaxScaler()
X_train = sc.fit_transform(X_train)
X_test = sc.transform(X_test)

"""# Feature Scaling"""

print(X_train)

print(X_test)

# Fitting K-NN to the Training set
from sklearn.neighbors import KNeighborsClassifier
classifier =  KNeighborsClassifier(n_neighbors = 5, metric = 'minkowski', p = 2)
classifier.fit(X_train, y_train)

from timeit import default_timer as timer
start = timer()
classifier.fit(X_train, y_train)
end = timer() 
print("Time Elapsed in seconds",  (end - start))

# Predicting the Test set results
y_pred = classifier.predict(X_test)

# Making the Confusion Matrix
from sklearn.metrics import confusion_matrix
cm = confusion_matrix(y_test, y_pred)
print('Confusion matrix: ')
print(cm)

# calculate Accuracy
#               Y_pred
#             0       1
#          0[64     4(FP)]  Type 1 Error
# y-test   1[3(FN)     29]  Type 2 Error
# Accuracy 64+29/64+4+3+29
from sklearn.metrics import accuracy_score
print('Accuracy: %.2f' % (accuracy_score(y_test, y_pred)*100))

from sklearn.metrics import precision_score
# calculate precision
# Precision = TruePositives / (TruePositives + FalsePositives)
#               Y_pred
#             0       1
#          0[64     4(FP)]  Type 1 Error
# y-test   1[3(FN)     29]  Type 2 Error
# precision= 29/29+4
precision = precision_score(y_test, y_pred, average='binary')
print('Precision: %.3f' % (precision*100))

# calculate recall
# Recall = TruePositives / (TruePositives + FalseNegatives)
#               Y_pred
#             0       1
#          0[64     4(FP)]  Type 1 Error
# y-test   1[3(FN)     29]  Type 2 Error
# precision= 29/29+3
from sklearn.metrics import recall_score
from sklearn.metrics import f1_score
recall = recall_score(y_test, y_pred, average='binary')
print('Recall: %.3f' % (recall*100))

# F-Measure = (2 * Precision * Recall) / (Precision + Recall)
# score= (2*87.879* 90.625)/87.879+ 90.625
# calculate score
score = f1_score(y_test, y_pred, average='binary')
print('F-Measure: %.3f' % (score*100))

Age =  49#@param {type:"number"}
Estimated_Salary =  46000#@param {type:"number"}
x = 0 #@param {type:"number"}

output=classifier.predict(sc.transform([[Age ,Estimated_Salary ]]))
print("Perchased =", output)
if output==[1]:
  print( 'Custome will purchase Product')
else:
  print('Customer will not purchase computer')

# Visualising the Training set results
from matplotlib.colors import ListedColormap
X_set, y_set = X_train, y_train
X1, X2 = np.meshgrid(np.arange(start = X_set[:, 0].min() - 1, stop = X_set[:, 0].max() + 1, step = 0.01),
                     np.arange(start = X_set[:, 1].min() - 1, stop = X_set[:, 1].max() + 1, step = 0.01))
plt.contourf(X1, X2, classifier.predict(np.array([X1.ravel(), X2.ravel()]).T).reshape(X1.shape),
             alpha = 0.75, cmap = ListedColormap(('red', 'green')))
plt.xlim(X1.min(), X1.max())
plt.ylim(X2.min(), X2.max())
for i, j in enumerate(np.unique(y_set)):
    plt.scatter(X_set[y_set == j, 0], X_set[y_set == j, 1],
                c = ListedColormap(('red', 'green'))(i), label = j)
plt.title('K-NN (Training set)')
plt.xlabel('Age')
plt.ylabel('Estimated Salary')
plt.legend()
plt.show()

# Visualising the Test set results
from matplotlib.colors import ListedColormap
X_set, y_set = X_test, y_test
X1, X2 = np.meshgrid(np.arange(start = X_set[:, 0].min() - 1, stop = X_set[:, 0].max() + 1, step = 0.01),
                     np.arange(start = X_set[:, 1].min() - 1, stop = X_set[:, 1].max() + 1, step = 0.01))
plt.contourf(X1, X2, classifier.predict(np.array([X1.ravel(), X2.ravel()]).T).reshape(X1.shape),
             alpha = 0.75, cmap = ListedColormap(('red', 'green')))
plt.xlim(X1.min(), X1.max())
plt.ylim(X2.min(), X2.max())
for i, j in enumerate(np.unique(y_set)):
    plt.scatter(X_set[y_set == j, 0], X_set[y_set == j, 1],
                c = ListedColormap(('red', 'green'))(i), label = j)
plt.title('K-NN (Test set)')
plt.xlabel('Age')
plt.ylabel('Estimated Salary')
plt.legend()
plt.show()

# save the model to disk
import joblib
filename = '/content/drive/My Drive/finalized_modelKNN.sav'
joblib.dump(classifier, filename)
 
# some time later...
 
# load the model from disk
loaded_model = joblib.load(filename)
result = loaded_model.score(X_test, y_test)
print(result)

import pickle 
print("[INFO] Saving model...")
# Save the trained model as a pickle string. 
saved_model=pickle.dump(classifier,open('/content/drive/My Drive/models/knnmodel.pkl', 'wb')) 
# Saving model to disk

# Load the pickled model 
model = pickle.load(open('/content/drive/My Drive/models/knnmodel.pkl', 'rb'))  
# Use the loaded pickled model to make predictions 
model.predict(X_test)

!pip install streamlit

# Mounting Google Drive
from google.colab import drive
drive.mount('/content/drive')

!pip install pyngrok

!ngrok authtoken 1oEm0wopEJyjrT38ULluwUKK5fq_7ai4ZocZJ2YuFuoiJfoMh

# Commented out IPython magic to ensure Python compatibility.
# %%writefile app.py
# import streamlit as st 
# from PIL import Image
# import pickle
# import numpy as np
# import matplotlib.pyplot as plt
# import pandas as pd
# st.set_option('deprecation.showfileUploaderEncoding', False)
# # Load the pickled model
# model = pickle.load(open('/content/drive/My Drive/models/knnmodel.pkl', 'rb')) 
# dataset= pd.read_csv('/content/drive/My Drive/Social_Network_Ads.csv')
# X = dataset.iloc[:, [2, 3]].values
# from sklearn.preprocessing import MinMaxScaler
# sc = MinMaxScaler()
# X = sc.fit_transform(X)
# def predict_note_authentication(UserID, Gender,Age,EstimatedSalary):
#   output= model.predict(sc.transform([[Age,EstimatedSalary]]))
#   print("Purchased", output)
#   if output==[1]:
#     prediction="Item will be purchased"
#   else:
#     prediction="Item will not be purchased"
#   print(prediction)
#   return prediction
# def main():
#     
#     html_temp = """
#    <div class="" style="background-color:blue;" >
#    <div class="clearfix">           
#    <div class="col-md-12">
#    <center><p style="font-size:40px;color:white;margin-top:10px;">Poornima Institute of Engineering & Technology</p></center> 
#    <center><p style="font-size:30px;color:white;margin-top:10px;">Department of Computer Engineering</p></center> 
#    <center><p style="font-size:25px;color:white;margin-top:10px;"Machine Learning Lab Experiment</p></center> 
#    </div>
#    </div>
#    </div>
#    """
#     st.markdown(html_temp,unsafe_allow_html=True)
#     st.header("Item Purchase Prediction using K nearest neighbor Algorithm")
#     
#     UserID = st.text_input("UserID","")
#     Gender = st.selectbox(
#     "Gender",
#     ("Male", "Female", "Others")
#     )
#     
#     Age = st.number_input('Insert a Age',18,60)
#    
#     EstimatedSalary = st.number_input("Insert Estimated Salary",15000,150000)
#     resul=""
#     if st.button("Predict"):
#       result=predict_note_authentication(UserID, Gender,Age,EstimatedSalary)
#       st.success('Model has predicted {}'.format(result))
#       
#     if st.button("About"):
#       st.subheader("Developed by Deepak Moud")
#       st.subheader("Head , Department of Computer Engineering")
# 
# if __name__=='__main__':
#   main()

!nohup streamlit run  app.py &

from pyngrok import ngrok
url=ngrok.connect(port='8050')
url

!streamlit run --server.port 80 app.py

ngrok.kill()